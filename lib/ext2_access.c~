// ext2 definitions from the real driver in the Linux kernel.
#include "ext2fs.h"

// This header allows your project to link against the reference library. If you
// complete the entire project, you should be able to remove this directive and
// still compile your code.
#include "reference_implementation.h"

// Definitions for ext2cat to compile against.
#include "ext2_access.h"

#include <stdio.h>
#include <string.h>


///////////////////////////////////////////////////////////
//  Accessors for the basic components of ext2.
///////////////////////////////////////////////////////////

// Return a pointer to the primary superblock of a filesystem.
struct ext2_super_block * get_super_block(void * fs) {
    
  // superblock is always at byte offset 1024
  return (struct ext2_super_block*)(((char*)fs) + 1024);
 
}


// Return the block size for a filesystem.
__u32 get_block_size(void * fs) {

  struct ext2_super_block *super = get_super_block(fs);
  
  // the superblock stores the log2 of the block size
  return 1024 << (super->s_log_block_size);
}


// Return a pointer to a block given its number.
// get_block(fs, 0) == fs;
void * get_block(void * fs, __u32 block_num) {
  
  if(0 == block_num){
    return fs;
  }
  
  struct ext2_super_block *super = get_super_block(fs);
  
  __u32 size = get_block_size(fs);
  __u32 i = 2; // counter
  void* block = (void*)super; // current block

  if(1 == block_num){
    return (void*)super;
  }

  // step through the blocks
  while (i <= block_num){
    block = (void*)((char*)block + size);
    i++;
  }

  return block;
}


// Return a pointer to the first block group descriptor in a filesystem. Real
// ext2 filesystems will have several of these, but, for simplicity, we will
// assume there is only one.
struct ext2_group_desc * get_block_group(void * fs, __u32 block_group_num) {

  //the first block after the super block will be the block group descriptor
  return (struct ext2_group_desc*)get_block(fs,2);
  
}


// Return a pointer to an inode given its number. In a real filesystem, this
// would require finding the correct block group, but you may assume it's in the
// first one.
struct ext2_inode * get_inode(void * fs, __u32 inode_num) {
    
  if(0 == inode_num){
    return NULL; // invalid inode
  }

  // 2nd arg to get_block_group doesn't matter, we only have group.
  struct ext2_group_desc *block_group = get_block_group(fs,0); 
  struct ext2_inode* inode = (struct ext2_inode*)get_block(fs,block_group->bg_inode_table);

  struct ext2_super_block *super = get_super_block(fs);
  __u32 inodes_per_group = super->s_inodes_per_group;
  
  __u32 i;
  for(i = 1; i <= inodes_per_group; i++){
    
    if(i == inode_num){
      return inode;
    }

    inode++;
  }
  
  return NULL; //shouldn't get here
}



///////////////////////////////////////////////////////////
//  High-level code for accessing filesystem components by path.
///////////////////////////////////////////////////////////

// Chunk a filename into pieces.
// split_path("/a/b/c") will return {"a", "b", "c"}.
//
// This one's a freebie.
char ** split_path(char * path) {
    int num_slashes = 0;
    for (char * slash = path; slash != NULL; slash = strchr(slash + 1, '/')) {
        num_slashes++;
    }

    // Copy out each piece by advancing two pointers (piece_start and slash).
    char ** parts = (char **) calloc(num_slashes, sizeof(char *));
    char * piece_start = path + 1;
    int i = 0;
    for (char * slash = strchr(path + 1, '/');
         slash != NULL;
         slash = strchr(slash + 1, '/')) {
        int part_len = slash - piece_start;
        parts[i] = (char *) calloc(part_len + 1, sizeof(char));
        strncpy(parts[i], piece_start, part_len);
        piece_start = slash + 1;
        i++;
    }
    // Get the last piece.
    parts[i] = (char *) calloc(strlen(piece_start) + 1, sizeof(char));
    strncpy(parts[i], piece_start, strlen(piece_start));
    return parts;
}


// Convenience function to get the inode of the root directory.
struct ext2_inode * get_root_dir(void * fs) {
    return get_inode(fs, EXT2_ROOT_INO);
}


// Given the inode for a directory and a filename, return the inode number of
// that file inside that directory, or 0 if it doesn't exist there.
// 
// name should be a single component: "foo.txt", not "/files/foo.txt".
__u32 get_inode_from_dir(void * fs, 
                         struct ext2_inode * dir, 
                         char * name) {
  
  //search the directory entries, starting from the first block
  __u32 block = dir->i_block[0];
  struct ext2_dir_entry* entry = (struct ext2_dir_entry*)get_block(fs,block);
  __u32 bytes_so_far = 0;

  while(bytes_so_far < dir->i_size){
    printf("entry->name: %s\n", entry->name);
    printf("entry->rec_len: %u\n", entry->rec_len);
    printf("entry->name_len: %u\n", entry->name_len);
    
    __u16 actual_len = entry->name_len & 0xFF;
    char entry_name[513];
    strncpy(entry_name, entry->name, actual_len);
    entry_name[actual_len] = '\0';

    if(0 == strcmp(name,entry_name)){
      return entry->inode;
    }
    
    //go to the next directory entry
    entry = (struct ext2_dir_entry*)((char*)entry + entry->rec_len);
    bytes_so_far += entry->rec_len;
  }

  return 0;
  
}


// Find the inode number for a file by its full path.
// This is the functionality that ext2cat ultimately needs.
__u32 get_inode_by_path(void * fs, char * path) {

  
  int num_slashes = 0;
  for (char * slash = path; slash != NULL; slash = strchr(slash + 1, '/')) {
    num_slashes++;
  }
  
  char **names = split_path(path);
  struct ext2_inode* dir = get_root_dir(fs); //current directory

  int level = 0;
  __u32 inode_num = 0;
  while(level < num_slashes){
    
    printf("level: %d\n", level);
    printf("inode_num: %u\n",inode_num);
    printf("names[level]: %s\n", names[level]);


    // get inode number with the name we're looking for
    inode_num = get_inode_from_dir(fs,dir,names[level]);

    if(0 == inode_num){
      return 0;
    }

    //get the inode_struct that goes with it
    dir =  get_inode(fs, inode_num);

    level++;
  }

  free(names);
  return inode_num;
}

